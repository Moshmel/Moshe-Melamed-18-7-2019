{"version":3,"sources":["Pages/Loading/Loading.js","Components/FavoriteCard/FavoriteCard.js","services/weather-service.js","Pages/FavoritePage/FavoritePage.js","assets/HeartCheckBox/HeartCheckBox.js","Components/DayCard/DayCard.js","Components/DaysCardList/DaysCardList.js","Pages/WeatherPage/WeatherPage.js","Components/Navbar/Navbar.js","Router.js","services/storage-service.js","store/AppStore.js","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","className","class","styles","h3","marginTop","card","backgroundColor","display","minWidth","maxWidth","height","boxShadow","margin","borderRadius","imgConatiner","img","FavoriteCard","props","info","path","concat","label","id","isDayTime","react_router_dom","to","style","weatherText","temperature","Imperial","Value","src","_callee","favoritedArray","arr","idx","fav","req","favInfo","regenerator_default","wrap","_context","prev","next","length","axios","get","sent","data","IsDayTime","Temperature","WeatherText","push","t0","abrupt","stop","_callee2","cityid","_context2","_callee3","val","_context3","weather_service","manageAutoCompOptions","options","reduce","acc","el","Key","LocalizedName","manageDaysForcasts","forcastData","DailyForecasts","time","EpochDate","min","Minimum","max","Maximum","Day","IconPhrase","getFiveDaysForcast","getFavoritesData","getAutoCompOptions","FavoritePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","favorited","isLoading","getFavorited","store","weatherService","toJS","favoritedData","setState","Pages_Loading_Loading","map","i","Components_FavoriteCard_FavoriteCard","key","Component","inject","observer","HeartCheckbox","onClick","event","console","warn","_this2","_this$props","checked","assign","DayCard","dayInfo","day","Date","last","setUTCSeconds","toDateString","substring","DaysCardList","forcast","Components_DayCard_DayCard","WeatherPage","handleFavoriteClick","addToFavorite","selectedCity","prevState","favoritedList","findIndex","splice","handleChange","_ref","asyncToGenerator","mark","e","handledOptions","value","target","test","toast","error","notify","log","_x","apply","arguments","handleSelect","_ref2","selected","find","daysData","_x2","favoritedListArr","match","params","cityname","isFavorite","fiveDays","Autocomplete_default","items","shouldItemRender","item","toLowerCase","indexOf","getItemValue","renderItem","highlighted","onChange","onSelect","HeartCheckBox_HeartCheckbox","Components_DaysCardList_DaysCardList","Navbar","exact","Router","Components_Navbar_Navbar","react_router","component","storage_service","loadFromStorage","localStorage","getItem","JSON","parse","saveToStorage","stringify","FAV_DATA","AppStore","city","storageService","decorate","computed","observable","action","App","configure","mobx_react_module","src_Router","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdffe952.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Loading.scss\";\r\nconst Loading = () => {\r\n  return (\r\n    <section className=\"loading\">\r\n      <h2 class=\"animate\">Loading</h2>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './FavoriteCard.scss';\r\nconst FavoriteCard = props => {\r\n  const { info } = props;\r\n  const path=`/home/${info.label}/${info.id}`\r\n  const {isDayTime}=info;\r\n  return (\r\n\r\n    <NavLink to={path}>\r\n    <section className=\"favorite-card\" style={styles.card}>\r\n\r\n      <h3 style={styles.h3}>{info.label}</h3>\r\n      <h3 style={styles.h3}>{info.weatherText}</h3>\r\n      <h3 style={styles.h3}>{info.temperature.Imperial.Value} F</h3>\r\n      <div style={styles.imgConatiner}>\r\n      {isDayTime && <img src=\"https://res.cloudinary.com/explority/image/upload/c_scale,h_120/v1564228822/sun_qwmb3w.jpg\"/>}\r\n      {!isDayTime && <img src=\"https://res.cloudinary.com/explority/image/upload/c_scale,h_120/v1564228823/moon_dvwkkt.jpg\"/>}\r\n        </div>\r\n    </section>\r\n    </NavLink>\r\n  );\r\n};\r\nvar styles = {\r\n  h3: {\r\n    marginTop: 6\r\n  },\r\n  card: {\r\n    backgroundColor:'white',\r\n    display:\"block\",  \r\n    minWidth: 168,\r\n    maxWidth:168,\r\n    height: 200,\r\n    boxShadow: \"0 1px 5px 1px rgba(0,0,0,.15)\",\r\n    margin: 15,\r\n    borderRadius:'4px'\r\n  },\r\n  imgConatiner: {},\r\n  img: {}\r\n};\r\n\r\nexport default FavoriteCard;\r\n","import axios from \"axios\";\r\n\r\nasync function getFavoritesData(favoritedArray) {\r\n  let arr = [];\r\n  for (let idx = 0; idx < favoritedArray.length; idx++) {\r\n    let fav = favoritedArray[idx];\r\n    try {\r\n      let req = `https://dataservice.accuweather.com/currentconditions/v1/${\r\n        fav.id\r\n      }?apikey=EDoXcIUtqNmGbRlLbqNReSUUtgmnUHt0&language=en-us&details=falseHTTP/1.1`;\r\n      let favInfo = await axios.get(req);\r\n      favInfo = favInfo.data[0];\r\n\r\n      fav.isDayTime = favInfo.IsDayTime;\r\n      fav.temperature = favInfo.Temperature;\r\n      fav.weatherText = favInfo.WeatherText;\r\n      arr.push(fav);\r\n    } catch (e) {}\r\n  }\r\n  return arr;\r\n}\r\n\r\nasync function getFiveDaysForcast(cityid) {\r\n  const req = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityid}?apikey=EDoXcIUtqNmGbRlLbqNReSUUtgmnUHt0&language=en-us&details=false&metric=false%20HTTP/1.1`;\r\n  return axios.get(req);\r\n}\r\nasync function getAutoCompOptions(val) {\r\n  const req =\r\n     `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=%09EDoXcIUtqNmGbRlLbqNReSUUtgmnUHt0&q=${val}&language=en-us HTTP/1.1`;\r\n  return axios.get(req);\r\n}\r\nfunction manageAutoCompOptions(options) {\r\n  var arr = options.data.reduce((acc, el) => {\r\n    acc.push({ id: el.Key, label: el.LocalizedName });\r\n    return acc;\r\n  }, []);\r\n\r\n  return arr;\r\n}\r\nfunction manageDaysForcasts(forcastData) {\r\n  var temp = forcastData.data.DailyForecasts;\r\n  var arr = temp.reduce((acc, el) => {\r\n    acc.push({\r\n      time: el.EpochDate,\r\n      min: el.Temperature.Minimum.Value,\r\n      max: el.Temperature.Maximum.Value,\r\n      weatherText: el.Day.IconPhrase\r\n    });\r\n    return acc;\r\n  }, []);\r\n  return arr;\r\n}\r\n\r\nexport default {\r\n  manageAutoCompOptions,\r\n  manageDaysForcasts,\r\n  getFiveDaysForcast,\r\n  getFavoritesData,\r\n  getAutoCompOptions\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./FavoritePage.scss\";\r\nimport { toJS } from \"mobx\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport Loading from \"../Loading/Loading\";\r\nimport FavoriteCard from \"../../Components/FavoriteCard/FavoriteCard\";\r\n\r\nimport weatherService from \"../../services/weather-service\";\r\n\r\nclass FavoritePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      favorited: null,\r\n      isLoading: true\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    const { getFavorited } = this.props.store;\r\n    const favoritedData = await weatherService.getFavoritesData(\r\n      toJS(getFavorited)\r\n    );\r\n    this.setState({ favorited: favoritedData, isLoading: false });\r\n  }\r\n  render() {\r\n    if (this.state.isLoading) return <Loading />;\r\n    return (\r\n      <section className=\"favorite-page slide-in-fwd-center\">\r\n        <div className=\"wrapper\">\r\n          <h1>Favorited Places</h1>\r\n          <div className=\"card-container\">\r\n            {this.state.favorited.map((fav, i) => (\r\n              <FavoriteCard info={fav} key={i} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default inject(\"store\")(observer(FavoritePage));\r\n","import React,{ Component } from \"react\";\r\nimport './HeartCheckBox.css'\r\nexport default class HeartCheckbox extends Component {\r\n    onClick = (event) => {\r\n      console.warn('Missing \"onClick\" property');\r\n    }\r\n  \r\n    render() {\r\n      const { checked, onClick } = this.props;\r\n  \r\n      return (\r\n        <button\r\n          className={ `heart-checkbox ${checked ? 'checked' : ''}` }\r\n          onClick={ (event) => onClick ? onClick(event, this.props) : this.onClick(event) }\r\n          { ...this.props }\r\n        >\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n","import React from \"react\";\r\nimport './DayCard.scss';\r\nconst DayCard = props => {\r\n  const { dayInfo } = props;\r\n\r\n  var day = new Date(0);\r\n  let formatedDay = new Date(day.setUTCSeconds(dayInfo.time));\r\n  let last = formatedDay.toDateString().substring(0, 3);\r\n  return (\r\n    <section className=\"day-card\" >\r\n      <div  className=\"day-card-container\">\r\n        <h3>{last}</h3>\r\n      <h3>{dayInfo.max}-{dayInfo.min} F</h3>\r\n      <h3 className=\"weather-info\">{dayInfo.weatherText}</h3>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DayCard;\r\n","import React, { Component } from \"react\";\r\nimport DayCard from \"../DayCard/DayCard\";\r\nimport \"./DaysCardList.scss\";\r\nconst DaysCardList = props => {\r\n  const { forcast } = props;\r\n\r\n  return (\r\n    <section className=\"days-card-list\">\r\n      {forcast.map((day, i) => {\r\n        return <DayCard dayInfo={day} key={i} />;\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DaysCardList;\r\n","import React, { Component } from \"react\";\r\nimport \"./WeatherPage.scss\";\r\nimport { toJS } from \"mobx\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n//cmps\r\nimport ReactAutocomplete from \"react-autocomplete\";\r\nimport HeartCheckbox from \"../../assets/HeartCheckBox/HeartCheckBox\";\r\nimport DaysCardList from \"../../Components/DaysCardList/DaysCardList\";\r\n\r\n//services\r\n\r\nimport weatherService from \"../../services/weather-service\";\r\n\r\nclass WeatherPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      options: [],\r\n      selectedCity: null,\r\n      daysData: [],\r\n      favoritedList: [],\r\n      checked: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //check witch city to show\r\n    const { getFavorited } = this.props.store;\r\n    const favoritedListArr = toJS(getFavorited);\r\n    const { cityname, cityid } = this.props.match.params;\r\n    const selected =\r\n      cityname && cityid\r\n        ? { id: cityid, label: cityname }\r\n        : { id: \"215854\", label: \"Tel-aviv\" };\r\n    let idx = favoritedListArr.findIndex(el => el.id === selected.id);\r\n    const isFavorite = idx > -1 ? true : false;\r\n    //fetching city data\r\n    try {\r\n      const data = await weatherService.getFiveDaysForcast(selected.id);\r\n      const fiveDays = weatherService.manageDaysForcasts(data);\r\n      this.setState({\r\n        daysData: fiveDays,\r\n        value: selected.label,\r\n        selectedCity: selected,\r\n        favoritedList: favoritedListArr,\r\n        checked: isFavorite\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  handleFavoriteClick = () => {\r\n    const { addToFavorite } = this.props.store;\r\n    if (this.state.selectedCity) {\r\n      this.setState((prevState, props) => ({\r\n        checked: !prevState.checked\r\n      }));\r\n      addToFavorite(this.state.selectedCity);\r\n      const { getFavorited } = this.props.store;\r\n      const favoritedList = toJS(getFavorited);\r\n      if (favoritedList.length > 0) {\r\n        let idx = favoritedList.findIndex(\r\n          fav => fav.id == this.state.selectedCity.id\r\n        );\r\n        if (idx > -1) {\r\n          //removing locally unfavorited place\r\n          let arr = favoritedList.splice(idx, 1);\r\n          this.setState({ favoritedList: arr });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  handleChange = async e => {\r\n    this.setState({ value: e.target.value });\r\n    let reg = /^[a-z]+$/i;\r\n    if (!reg.test(e.target.value)) {\r\n      const notify = () => toast.error(\"Use english letters only\");\r\n      notify();\r\n    } else {\r\n      try {\r\n        const options = await weatherService.getAutoCompOptions(e.target.value);\r\n        const handledOptions = weatherService.manageAutoCompOptions(options);\r\n        this.setState({ options: handledOptions });\r\n      } catch (e) {\r\n        console.log(\"error on fetching options\", e);\r\n      }\r\n    }\r\n  };\r\n  handleSelect = async val => {\r\n    const selected = this.state.options.find(el => el.label === val);\r\n    const data = await weatherService.getFiveDaysForcast(selected.id);\r\n    const forcast = weatherService.manageDaysForcasts(data);\r\n    this.setState({ selectedCity: selected, value: val, daysData: forcast });\r\n  };\r\n  render() {\r\n    return (\r\n      <section className=\"weather-page slide-in-fwd-center\">\r\n        <div className=\"input-section\">\r\n          <label className=\"city-label\">Enter city</label>\r\n          <ReactAutocomplete\r\n            items={this.state.options}\r\n            shouldItemRender={(item, value) =>\r\n              item.label.toLowerCase().indexOf(value.toLowerCase()) > -1\r\n            }\r\n            getItemValue={item => item.label}\r\n            renderItem={(item, highlighted) => (\r\n              <div\r\n                key={item.id}\r\n                style={{\r\n                  backgroundColor: highlighted ? \"#eee\" : \"transparent\"\r\n                }}\r\n              >\r\n                {item.label}\r\n              </div>\r\n            )}\r\n            value={this.state.value}\r\n            onChange={this.handleChange}\r\n            onSelect={val => this.handleSelect(val)}\r\n          />\r\n        </div>\r\n        <div className=\"favorite-heart\">\r\n          <label>Mark as favorite</label>\r\n          <HeartCheckbox\r\n            checked={this.state.checked}\r\n            onClick={this.handleFavoriteClick}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"forcast-card-container\">\r\n          <DaysCardList forcast={this.state.daysData} />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default inject(\"store\")(observer(WeatherPage));\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './Navbar.scss'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <section className=\"navbar\">\r\n        <div className=\"wrapper\">\r\n\r\n        <div className=\"logo\">\r\n            <h1>herolo weather app</h1>\r\n        </div>\r\n        <div className=\"links-container\">\r\n        <NavLink exact className=\"Nav_link\" to=\"/\">\r\n         Home\r\n        </NavLink>|\r\n        <NavLink exact className=\"Nav_link\" to=\"/favorite\">\r\n          Favorite\r\n        </NavLink>\r\n\r\n        </div>\r\n     \r\n        </div>\r\n    </section>\r\n  );\r\n};\r\nexport default Navbar;","import React from \"react\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\n\r\n//Pages\r\nimport FavoritePage from \"./Pages/FavoritePage/FavoritePage\";\r\nimport WeatherPage from \"./Pages/WeatherPage/WeatherPage\";\r\n\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\n\r\nconst Router = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Navbar />\r\n      <Route exact path=\"/\" component={WeatherPage} />\r\n      <Route exact path=\"/favorite\" component={FavoritePage} />\r\n      <Route exact path=\"/home/:cityname/:cityid\" component={WeatherPage} />\r\n\r\n    </HashRouter>\r\n  );\r\n};\r\nexport default Router;\r\n","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val)? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport default {\r\n    loadFromStorage,\r\n    saveToStorage\r\n\r\n}","import { observable, computed, action, decorate, toJS } from \"mobx\";\r\nimport storageService from \"../services/storage-service\";\r\nconst FAV_DATA = \"favorite-data\";\r\nclass AppStore {\r\n  constructor() {\r\n    const fav = storageService.loadFromStorage(FAV_DATA);\r\n    if (fav) this.favorited = fav;\r\n    else this.favorited = [];\r\n  }\r\n\r\n  get getFavorited() {\r\n    return this.favorited;\r\n  }\r\n  addToFavorite = city => {\r\n    const idx = this.favorited.findIndex(fav => fav.id === city.id);\r\n    if (idx === -1) {\r\n      this.favorited.push(city);\r\n    } else {\r\n      this.favorited.splice(idx, 1);\r\n    }\r\n\r\n   \r\n    storageService.saveToStorage(FAV_DATA, this.favorited);\r\n  };\r\n}\r\n\r\ndecorate(AppStore, {\r\n  getFavorited: computed,\r\n  // isUserLoggedOn: computed,\r\n  favorited: observable,\r\n  // user: observable,\r\n  // setUser: action,\r\n  addToFavorite: action\r\n  // disconnectUser: action\r\n});\r\n\r\nconst App = new AppStore();\r\nexport default App;\r\n","import React from \"react\";\n\nimport \"./App.scss\";\n\nimport Router from \"./Router\";\nimport { Provider } from \"mobx-react\";\nimport store from \"./store/AppStore\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ntoast.configure();\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Router />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}